package Vue.Admin;


import DAO.DbConfigDAO;

import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.sql.*;


public class Ad_patient extends javax.swing.JFrame {

    PreparedStatement pst;
    ResultSet rs;
    Connection con;
    public Ad_patient() {
        super("Historique des patients");
        initComponents();
        table();

    }

    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        ajouter = new javax.swing.JButton();
        modifier = new javax.swing.JButton();
        supprimer = new javax.swing.JButton();
        actualiser = new javax.swing.JButton();
        menu = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        txtnom = new javax.swing.JTextField();
        txtprenom = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        txtemail = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        txtsexe = new javax.swing.JComboBox<>();
        txtage = new javax.swing.JTextField();
        txtmdp = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
                new Object [][] {
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null}
                },
                new String [] {

                }
        ));
        jScrollPane1.setViewportView(jTable1);

        jPanel2.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        ajouter.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        ajouter.setText("Ajouter");
        ajouter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
                try {
                    String nom = txtnom.getText();
                    String prenom = txtprenom.getText();
                    String email = txtemail.getText();
                    String mdp = txtmdp.getText();
                    String sexe = (String) txtsexe.getSelectedItem();
                    String age = txtage.getText();

                    if (txtnom.getText().isEmpty() || txtprenom.getText().isEmpty() || txtemail.getText().isEmpty() || txtmdp.getText().isEmpty() || ((String) txtsexe.getSelectedItem()).isEmpty() || txtage.getText().isEmpty()) {
                        JOptionPane.showMessageDialog(Ad_patient.this, "Champs invalides !");
                    }


                    DbConfigDAO conf = new DbConfigDAO();
                    try (Connection conn = conf.getConnection();
                         PreparedStatement pstUtilisateur = conn.prepareStatement("INSERT INTO Utilisateurs(nom, prenom, email, password, type_compte) values (?,?,?,?,?)", Statement.RETURN_GENERATED_KEYS);
                         PreparedStatement pstPatient = conn.prepareStatement("INSERT INTO Patients (id_utilisateur,idPatient, sexe, age) VALUES (?,?,?,?)")) {

                        // Remplir les paramètres pour l'insertion dans la table Utilisateurs
                        pstUtilisateur.setString(1, nom);
                        pstUtilisateur.setString(2, prenom);
                        pstUtilisateur.setString(3, email);
                        pstUtilisateur.setString(4, mdp);
                        pstUtilisateur.setString(5, "patient");

                        pstUtilisateur.executeUpdate();

                        // Récupérer l'ID généré pour l'utilisateur nouvellement inséré
                        ResultSet generatedKeys = pstUtilisateur.getGeneratedKeys();
                        if (generatedKeys.next()) {
                            int idUtilisateur = generatedKeys.getInt(1);

                            // Remplir les paramètres pour l'insertion dans la table Patients
                            pstPatient.setInt(1, idUtilisateur);
                            pstPatient.setInt(2, idUtilisateur);
                            pstPatient.setString(3, sexe);
                            pstPatient.setString(4, age);

                            pstPatient.executeUpdate();
                            table();
                        }

                        JOptionPane.showMessageDialog(Ad_patient.this, "Inscription réussie !", "Succès", JOptionPane.INFORMATION_MESSAGE);
                    }
                }catch (Exception exception) {
                    exception.printStackTrace();
                    JOptionPane.showMessageDialog(Ad_patient.this, "Erreur lors de l'enregistrement : " + exception.getMessage(), "Erreur de base de données", JOptionPane.ERROR_MESSAGE);

                }}
        });

        modifier.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        modifier.setText("Modifier");
        modifier.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
                int selectedRow = jTable1.getSelectedRow();
                if (selectedRow == -1) {
                    JOptionPane.showMessageDialog(null, "Veuillez sélectionner un patient à modifier.");
                    return;
                }
                DbConfigDAO conf = new DbConfigDAO();
                // Récupérer l'ID utilisateur du patient à partir de la ligne sélectionnée
                String idUtilisateur = jTable1.getValueAt(selectedRow, 0).toString();

                // Récupérer les nouvelles valeurs à partir des champs de texte
                String nom = txtnom.getText();
                String prenom = txtprenom.getText();
                String email = txtemail.getText();
                String mdp = txtmdp.getText();
                String sexe = (String) txtsexe.getSelectedItem();
                String age = txtage.getText();

                // Mettre à jour les informations dans la table Utilisateurs
                String sqlUpdateUtilisateur = "UPDATE Utilisateurs SET nom = ?, prenom = ?, email = ?, password = ? WHERE id_utilisateur = ?";
                try (Connection conn = conf.getConnection();
                     PreparedStatement pstUpdateUtilisateur = conn.prepareStatement(sqlUpdateUtilisateur)) {
                    pstUpdateUtilisateur.setString(1, nom);
                    pstUpdateUtilisateur.setString(2, prenom);
                    pstUpdateUtilisateur.setString(3, email);
                    pstUpdateUtilisateur.setString(4, mdp);
                    pstUpdateUtilisateur.setString(5, idUtilisateur);
                    pstUpdateUtilisateur.executeUpdate();
                } catch (SQLException | ClassNotFoundException ex) {
                    ex.printStackTrace();
                    JOptionPane.showMessageDialog(null, "Erreur lors de la mise à jour des informations dans la table Utilisateurs.");
                    return;
                }

                // Mettre à jour les informations dans la table Patients
                String sqlUpdatePatient = "UPDATE Patients SET sexe = ?, age = ? WHERE id_utilisateur = ?";
                try (Connection conn = conf.getConnection();
                     PreparedStatement pstUpdatePatient = conn.prepareStatement(sqlUpdatePatient)) {
                    pstUpdatePatient.setString(1, sexe);
                    pstUpdatePatient.setString(2, age);
                    pstUpdatePatient.setString(3, idUtilisateur);
                    pstUpdatePatient.executeUpdate();
                } catch (SQLException | ClassNotFoundException ex) {
                    ex.printStackTrace();
                    JOptionPane.showMessageDialog(null, "Erreur lors de la mise à jour des informations dans la table Patients.");
                    return;
                }

                // Si la mise à jour est réussie dans les deux tables, actualiser le tableau
                actualiserTableau();
                JOptionPane.showMessageDialog(null, "Informations du patient mises à jour avec succès.");
            }

        });

        supprimer.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        supprimer.setText("Supprimer");
        supprimer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
                    // Vérifier si une ligne est sélectionnée dans le tableau
                    int selectedRow = jTable1.getSelectedRow();
                    if (selectedRow == -1) {
                        JOptionPane.showMessageDialog(null, "Veuillez sélectionner un patient à supprimer.");
                        return;
                    }

                DbConfigDAO conf = new DbConfigDAO();

                    // Récupérer l'ID utilisateur du patient à partir de la ligne sélectionnée
                    String idUtilisateur = jTable1.getValueAt(selectedRow, 0).toString();

                    // Supprimer le patient de la table Patients
                    String sqlDeletePatient = "DELETE FROM Patients WHERE id_utilisateur = ?";
                    try (Connection conn = conf.getConnection();
                         PreparedStatement pstDeletePatient = conn.prepareStatement(sqlDeletePatient)) {
                        pstDeletePatient.setString(1, idUtilisateur);
                        pstDeletePatient.executeUpdate();
                    } catch (SQLException | ClassNotFoundException ex) {
                        ex.printStackTrace();
                        JOptionPane.showMessageDialog(null, "Erreur lors de la suppression du patient dans la table Patients.");
                        return;
                    }

                    // Supprimer l'utilisateur de la table Utilisateurs
                    String sqlDeleteUtilisateur = "DELETE FROM Utilisateurs WHERE id_utilisateur = ?";
                    try (Connection conn = conf.getConnection();
                         PreparedStatement pstDeleteUtilisateur = conn.prepareStatement(sqlDeleteUtilisateur)) {
                        pstDeleteUtilisateur.setString(1, idUtilisateur);
                        pstDeleteUtilisateur.executeUpdate();
                    } catch (SQLException | ClassNotFoundException ex) {
                        ex.printStackTrace();
                        JOptionPane.showMessageDialog(null, "Erreur lors de la suppression de l'utilisateur dans la table Utilisateurs.");
                        return;
                    }

                    // Si la suppression est réussie dans les deux tables, actualiser le tableau
                    actualiserTableau();
                    JOptionPane.showMessageDialog(null, "Patient supprimé avec succès.");
                }


            });

        actualiser.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        actualiser.setText("Actualiser");
        actualiser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
                txtnom.setText("");
                txtprenom.setText("");
                txtemail.setText("");
                txtmdp.setText("");
                txtsexe.getSelectedItem();
                txtage.setText("");

                actualiserTableau();
            }
        });

        menu.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        menu.setText("Menu");
        menu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
                dispose();
                new admin().setVisible(true);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
                jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(31, 31, 31)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(actualiser)
                                        .addComponent(supprimer, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(modifier, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(ajouter, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addGroup(jPanel2Layout.createSequentialGroup()
                                                .addComponent(menu)
                                                .addGap(10, 10, 10)))
                                .addContainerGap(36, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
                jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(17, 17, 17)
                                .addComponent(ajouter)
                                .addGap(26, 26, 26)
                                .addComponent(modifier)
                                .addGap(26, 26, 26)
                                .addComponent(supprimer)
                                .addGap(26, 26, 26)
                                .addComponent(actualiser)
                                .addGap(64, 64, 64)
                                .addComponent(menu)
                                .addContainerGap(66, Short.MAX_VALUE))
        );

        jLabel1.setFont(new java.awt.Font("Helvetica Neue", 0, 18)); // NOI18N
        jLabel1.setText("LISTES DES PATIENTS");

        jLabel2.setFont(new java.awt.Font("Helvetica Neue", 0, 18)); // NOI18N
        jLabel2.setText("Nom :");

        jLabel3.setFont(new java.awt.Font("Helvetica Neue", 0, 18)); // NOI18N
        jLabel3.setText("Prenom :");

        txtnom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtnomActionPerformed(evt);
            }
        });

        txtprenom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtprenomActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Helvetica Neue", 0, 18)); // NOI18N
        jLabel4.setText("Email :");

        jLabel5.setFont(new java.awt.Font("Helvetica Neue", 0, 18)); // NOI18N
        jLabel5.setText("Mot de passe :");

        jLabel6.setFont(new java.awt.Font("Helvetica Neue", 0, 18)); // NOI18N
        jLabel6.setText("Sexe :");

        jLabel7.setFont(new java.awt.Font("Helvetica Neue", 0, 18)); // NOI18N
        jLabel7.setText("Age :");

        txtsexe.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        txtsexe.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Masculin", "Feminin" }));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
                jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jScrollPane1)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(204, 204, 204))
                                        .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addGap(22, 22, 22)
                                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addGroup(jPanel1Layout.createSequentialGroup()
                                                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                                        .addComponent(txtprenom, javax.swing.GroupLayout.Alignment.LEADING)
                                                                        .addComponent(txtnom)
                                                                        .addComponent(txtemail)))
                                                        .addGroup(jPanel1Layout.createSequentialGroup()
                                                                .addComponent(jLabel5)
                                                                .addGap(18, 18, 18)
                                                                .addComponent(txtmdp, javax.swing.GroupLayout.DEFAULT_SIZE, 166, Short.MAX_VALUE)))
                                                .addGap(46, 46, 46)
                                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(jLabel6)
                                                        .addComponent(jLabel7))
                                                .addGap(42, 42, 42)
                                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                        .addComponent(txtsexe, 0, 145, Short.MAX_VALUE)
                                                        .addComponent(txtage))
                                                .addGap(47, 47, 47)))
                                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(15, 15, 15))
        );
        jPanel1Layout.setVerticalGroup(
                jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addGap(20, 20, 20)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addGroup(jPanel1Layout.createSequentialGroup()
                                                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                                        .addGroup(jPanel1Layout.createSequentialGroup()
                                                                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                                .addGap(25, 25, 25)
                                                                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                                                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                                        .addComponent(txtnom, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                                                .addGap(32, 32, 32))
                                                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                                                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                                                        .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                                        .addComponent(txtsexe, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                                                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                        .addComponent(txtprenom, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                                .addGap(27, 27, 27))
                                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                                        .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                        .addComponent(txtage, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)))
                                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addComponent(txtemail, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                .addGap(27, 27, 27)
                                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addComponent(txtmdp, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 332, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>

    private void txtprenomActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
    }

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {
        dispose();
        new admin().setVisible(true);
    }

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
    }

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
    }

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
    }

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
    }

    private void txtnomActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
    }


    public void table(){
        String []patient = {"ID","Nom","Prenom","Email","Password","Sexe","Age"};
        String [] montrer = new String[8];

        DefaultTableModel model = new DefaultTableModel(null,patient);

        String sql = "SELECT *\n" +
                "FROM Utilisateurs U\n" +
                "JOIN Patients P ON U.id_utilisateur = P.id_utilisateur;\n";

        try {
            DbConfigDAO conf = new DbConfigDAO();
            Connection conn = conf.getConnection();

            Statement st = conn.createStatement();
            rs = st.executeQuery(sql);

            while(rs.next()){
                montrer[0] = rs.getString("id_utilisateur");
                montrer[1] = rs.getString("nom");
                montrer[2] = rs.getString("prenom");
                montrer[3] = rs.getString("email");
                montrer[4] = rs.getString("password");
                montrer[5] = rs.getString("sexe");
                montrer[6] = rs.getString("age");
                model.addRow(montrer);
            }
            jTable1.setModel(model);
            conn.close();
        }
        catch (Exception e){
            e.printStackTrace();

        }
    }

    private void actualiserTableau() {
        String[] entetes = {"ID Utilisateur", "Nom", "Prénom", "Email", "Mot de passe", "Sexe", "Age"};
        DefaultTableModel model = new DefaultTableModel(null, entetes);
        DbConfigDAO conf = new DbConfigDAO();

        String sql = "SELECT U.id_utilisateur, U.nom, U.prenom, U.email, U.password, P.sexe, P.age " +
                "FROM Utilisateurs U " +
                "JOIN Patients P ON U.id_utilisateur = P.id_utilisateur";

        try (Connection conn = conf.getConnection();
             PreparedStatement pst = conn.prepareStatement(sql);
             ResultSet rs = pst.executeQuery()) {

            while (rs.next()) {
                String[] row = new String[7];
                row[0] = rs.getString("id_utilisateur");
                row[1] = rs.getString("nom");
                row[2] = rs.getString("prenom");
                row[3] = rs.getString("email");
                row[4] = rs.getString("password");
                row[5] = rs.getString("sexe");
                row[6] = rs.getString("age");
                model.addRow(row);
            }
        } catch (SQLException | ClassNotFoundException ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(null, "Erreur lors de l'actualisation du tableau.");
        }

        jTable1.setModel(model);
    }





    public static void main(String args[]) {

        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Ad_patient.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Ad_patient.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Ad_patient.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Ad_patient.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Ad_patient().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify
    private javax.swing.JButton ajouter;
    private javax.swing.JButton modifier;
    private javax.swing.JButton supprimer;
    private javax.swing.JButton actualiser;
    private javax.swing.JButton menu;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField txtage;
    private javax.swing.JTextField txtemail;
    private javax.swing.JTextField txtmdp;
    private javax.swing.JTextField txtnom;
    private javax.swing.JTextField txtprenom;
    private javax.swing.JComboBox<String> txtsexe;
    // End of variables declaration
}
//

